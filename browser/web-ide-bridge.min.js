/**
 * Web-IDE-Bridge v0.1.3 - Minified Production Build
 * Browser library for seamless IDE integration
 * https://github.com/peterthoeny/web-ide-bridge
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).WebIdeBridge=t()}(this,(function(){"use strict";function e(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}function t(e){if(!e||"string"!=typeof e)return!1;try{const t=new URL(e);return"ws:"===t.protocol||"wss:"===t.protocol}catch{return!1}}function n(e,t,n=!1){let o;return function(...s){const i=()=>{o=null,n||e.apply(this,s)},c=n&&!o;clearTimeout(o),o=setTimeout(i,t),c&&e.apply(this,s)}}class o{constructor(t){this.webIdeBridge=t,this.injectedButtons=new Map,this.observers=[],this.styles=null,this.initialized=!1}autoInjectButtons(e={}){const t={selector:"textarea",buttonText:"Edit in IDE ↗",buttonClass:"web-ide-bridge-btn",position:"after",fileTypeAttribute:"data-language",defaultFileType:"txt",excludeSelector:".web-ide-bridge-exclude",includeOnlySelector:null,watchForChanges:!0,style:"modern",...e};return this._initializeStyles(t.style),this._injectButtonsForSelector(t),t.watchForChanges&&this._watchForDOMChanges(t),{refresh:()=>this._injectButtonsForSelector(t),destroy:()=>this.removeAllButtons()}}injectButton(t,n={}){if(!t||"TEXTAREA"!==t.tagName)throw new Error("Element must be a textarea");const o={buttonText:"Edit in IDE ↗",buttonClass:"web-ide-bridge-btn",position:"after",fileType:"txt",style:"modern",...n};return this._initializeStyles(o.style),t.id||(t.id="web-ide-bridge-textarea-"+e()),this._createAndInjectButton(t,o)}removeAllButtons(){this.injectedButtons.forEach((e=>{e.parentNode&&e.parentNode.removeChild(e)})),this.injectedButtons.clear(),this.observers.forEach((e=>e.disconnect())),this.observers=[],this.styles&&this.styles.parentNode&&(this.styles.parentNode.removeChild(this.styles),this.styles=null)}updateButtonStates(e){this.injectedButtons.forEach((t=>{t.disabled=!e,t.textContent=e?t.dataset.originalText:"Connect to Server First"}))}_initializeStyles(e){if(this.styles||this.initialized)return;const t=document.createElement("style");t.id="web-ide-bridge-styles";let n="";switch(e){case"modern":n=this._getModernButtonStyles();break;case"minimal":n=this._getMinimalButtonStyles();break;default:n=this._getModernButtonStyles()}t.textContent=n,document.head.appendChild(t),this.styles=t,this.initialized=!0}_getModernButtonStyles(){return`.web-ide-bridge-btn{background:linear-gradient(135deg,#4f46e5 0%,#7c3aed 100%);color:white;border:none;padding:0.75rem 1.5rem;border-radius:8px;font-weight:600;font-size:0.875rem;cursor:pointer;transition:all 0.3s ease;display:inline-flex;align-items:center;gap:0.5rem;margin:0.5rem 0;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;text-decoration:none;outline:none}.web-ide-bridge-btn:hover:not(:disabled){transform:translateY(-1px);box-shadow:0 4px 12px rgba(79,70,229,0.3)}.web-ide-bridge-btn:active:not(:disabled){transform:translateY(0)}.web-ide-bridge-btn:disabled{background:#9ca3af;cursor:not-allowed;transform:none;box-shadow:none}.web-ide-bridge-btn:focus{box-shadow:0 0 0 3px rgba(79,70,229,0.3)}.web-ide-bridge-container{display:flex;gap:0.75rem;align-items:center;margin-top:0.5rem;flex-wrap:wrap}.web-ide-bridge-file-type{padding:0.5rem;border:1px solid #d1d5db;border-radius:6px;font-size:0.875rem;background:white;color:#374151}`}_getMinimalButtonStyles(){return`.web-ide-bridge-btn{background:#4f46e5;color:white;border:1px solid #4f46e5;padding:0.5rem 1rem;border-radius:4px;font-size:0.875rem;cursor:pointer;transition:background-color 0.2s ease;font-family:inherit;outline:none}.web-ide-bridge-btn:hover:not(:disabled){background:#4338ca}.web-ide-bridge-btn:disabled{background:#9ca3af;border-color:#9ca3af;cursor:not-allowed}.web-ide-bridge-btn:focus{box-shadow:0 0 0 2px rgba(79,70,229,0.5)}.web-ide-bridge-container{margin-top:0.5rem}.web-ide-bridge-file-type{margin-left:0.5rem;padding:0.25rem 0.5rem;border:1px solid #ccc;border-radius:3px;font-size:0.8rem}`}_injectButtonsForSelector(t){let n=document.querySelectorAll(t.selector);n=Array.from(n).filter((e=>!(t.excludeSelector&&e.matches(t.excludeSelector)||t.includeOnlySelector&&!e.matches(t.includeOnlySelector)))),n.forEach((n=>{n.id||(n.id="web-ide-bridge-textarea-"+e()),this.injectedButtons.has(n.id)||this._createAndInjectButton(n,{...t,fileType:n.getAttribute(t.fileTypeAttribute)||t.defaultFileType})}))}_createAndInjectButton(e,t){const n=document.createElement("div");n.className="web-ide-bridge-container";const o=document.createElement("button");o.className=t.buttonClass,o.textContent=t.buttonText,o.dataset.textareaId=e.id,o.dataset.fileType=t.fileType,o.dataset.originalText=t.buttonText,o.disabled=!this.webIdeBridge.isConnected();const s=document.createElement("select");s.className="web-ide-bridge-file-type",s.value=t.fileType,[{value:"txt",label:"Text (.txt)"},{value:"js",label:"JavaScript (.js)"},{value:"ts",label:"TypeScript (.ts)"},{value:"jsx",label:"React JSX (.jsx)"},{value:"tsx",label:"React TSX (.tsx)"},{value:"css",label:"CSS (.css)"},{value:"scss",label:"SCSS (.scss)"},{value:"less",label:"Less (.less)"},{value:"html",label:"HTML (.html)"},{value:"xml",label:"XML (.xml)"},{value:"json",label:"JSON (.json)"},{value:"yaml",label:"YAML (.yaml)"},{value:"py",label:"Python (.py)"},{value:"java",label:"Java (.java)"},{value:"cpp",label:"C++ (.cpp)"},{value:"c",label:"C (.c)"},{value:"php",label:"PHP (.php)"},{value:"rb",label:"Ruby (.rb)"},{value:"go",label:"Go (.go)"},{value:"rs",label:"Rust (.rs)"},{value:"sh",label:"Shell (.sh)"},{value:"sql",label:"SQL (.sql)"},{value:"md",label:"Markdown (.md)"}].forEach((e=>{const t=document.createElement("option");t.value=e.value,t.textContent=e.label,s.appendChild(t)})),s.addEventListener("change",(()=>{o.dataset.fileType=s.value})),o.addEventListener("click",(async()=>{if(!this.webIdeBridge.isConnected())return void alert("Please connect to Web-IDE-Bridge server first");try{const t=e.value,n=o.dataset.fileType;await this.webIdeBridge.editCodeSnippet(e.id,t,n)}catch(e){console.error("Failed to send code to IDE:",e),alert("Failed to send code to IDE: "+e.message)}})),n.appendChild(o),n.appendChild(s);switch(t.position){case"before":e.parentNode.insertBefore(n,e);break;case"after":e.parentNode.insertBefore(n,e.nextSibling);break;case"append":e.parentNode.appendChild(n);break;default:e.parentNode.insertBefore(n,e.nextSibling)}return this.injectedButtons.set(e.id,o),this.webIdeBridge.onStatusChange((e=>{this.updateButtonStates("connected"===e)})),o}_watchForDOMChanges(e){const t=new MutationObserver((t=>{let n=!1;t.forEach((t=>{"childList"===t.type&&t.addedNodes.forEach((t=>{t.nodeType===Node.ELEMENT_NODE&&(t.matches&&t.matches(e.selector)?n=!0:t.querySelector&&t.querySelector(e.selector)&&(n=!0))}))})),n&&setTimeout((()=>{this._injectButtonsForSelector(e)}),100)}));t.observe(document.body,{childList:!0,subtree:!0}),this.observers.push(t)}}return class{constructor(s,i={}){if(!s||"string"!=typeof s)throw new Error("userId is required and must be a string");if(this.userId=s,this.connectionId=e(),this.options={serverUrl:"ws://localhost:8071/web-ide-bridge/ws",autoReconnect:!0,reconnectInterval:5e3,maxReconnectAttempts:10,heartbeatInterval:3e4,connectionTimeout:1e4,debug:!1,...i},!t(this.options.serverUrl))throw new Error("Invalid server URL format");this.ws=null,this.connected=!1,this.connecting=!1,this.reconnectAttempts=0,this.reconnectTimeout=null,this.heartbeatTimeout=null,this.connectionTimeout=null,this.statusCallbacks=[],this.codeUpdateCallbacks=[],this.errorCallbacks=[],this.messageCallbacks=[],this.uiManager=new o(this),this.debouncedReconnect=n(this._attemptReconnect.bind(this),1e3),this._log("WebIdeBridge initialized",{userId:s,connectionId:this.connectionId})}async connect(){if(this.connected||this.connecting)return void this._log("Already connected or connecting");this.connecting=!0,this._updateStatus("connecting");try{await this._establishConnection(),this.reconnectAttempts=0,this._log("Successfully connected to server")}catch(e){throw this.connecting=!1,this._handleConnectionError(e),e}}disconnect(){this._log("Disconnecting from server"),this._clearTimeouts(),this.options.autoReconnect=!1,this.ws&&(this.ws.close(1e3,"Client disconnect"),this.ws=null),this.connected=!1,this.connecting=!1,this._updateStatus("disconnected")}isConnected(){return this.connected}getConnectionState(){return this.connected?"connected":this.connecting?"connecting":"disconnected"}async editCodeSnippet(t,n,o="txt"){if(!this.connected)throw new Error("Not connected to server");if(!t||"string"!=typeof t)throw new Error("textareaId is required and must be a string");if("string"!=typeof n)throw new Error("code must be a string");const s=e(),i={type:"edit_request",connectionId:this.connectionId,userId:this.userId,sessionId:s,payload:{textareaId:t,code:n,fileType:o||"txt",timestamp:Date.now()}};return this._log("Sending edit request",{textareaId:t,fileType:o,sessionId:s}),this._sendMessage(i),s}onStatusChange(e){if("function"!=typeof e)throw new Error("Callback must be a function");this.statusCallbacks.push(e),e(this.getConnectionState())}onCodeUpdate(e){if("function"!=typeof e)throw new Error("Callback must be a function");this.codeUpdateCallbacks.push(e)}onError(e){if("function"!=typeof e)throw new Error("Callback must be a function");this.errorCallbacks.push(e)}autoInjectButtons(e={}){return this.uiManager.autoInjectButtons(e)}injectButton(e,t={}){return this.uiManager.injectButton(e,t)}async _establishConnection(){return new Promise(((e,t)=>{try{this._log("Establishing WebSocket connection",{url:this.options.serverUrl}),this.ws=new WebSocket(this.options.serverUrl),this.connectionTimeout=setTimeout((()=>{this.ws.readyState!==WebSocket.OPEN&&(this.ws.close(),t(new Error("Connection timeout")))}),this.options.connectionTimeout),this.ws.onopen=()=>{clearTimeout(this.connectionTimeout),this._log("WebSocket connection opened"),this._handleConnectionOpen(),e()},this.ws.onmessage=e=>{this._handleMessage(e)},this.ws.onclose=e=>{this._handleConnectionClose(e)},this.ws.onerror=e=>{clearTimeout(this.connectionTimeout),this._log("WebSocket error",e),t(new Error("WebSocket connection failed"))}}catch(e){clearTimeout(this.connectionTimeout),t(e)}}))}__handleConnectionOpen(){this.connected=!0,this.connecting=!1,this._sendMessage({type:"browser_connect",connectionId:this.connectionId,userId:this.userId,timestamp:Date.now()}),this._updateStatus("connected"),this._startHeartbeat()}_handleConnectionClose(e){this._log("WebSocket connection closed",{code:e.code,reason:e.reason}),this.connected=!1,this.connecting=!1,this._clearTimeouts(),this._updateStatus("disconnected"),this.options.autoReconnect&&1e3!==e.code&&this._scheduleReconnect()}_handleConnectionError(e){this._log("Connection error",e),this._triggerErrorCallbacks(e.message||"Connection failed"),this.options.autoReconnect&&this._scheduleReconnect()}_handleMessage(e){try{const t=JSON.parse(e.data);switch(this._log("Received message",t),t.type){case"connection_ack":this._log("Connection acknowledged by server");break;case"pong":this._log("Received pong from server");break;case"error":this._handleServerError(t);break;default:this._log("Unknown message type",t.type)}}catch(t){this._log("Error parsing message",t),this._log("Raw message data",e.data),this._triggerErrorCallbacks("Failed to parse server message: "+t.message)}}_handleCodeUpdate(e){if(!e.payload||!e.payload.textareaId)return void this._log("Invalid code update message",e);const{textareaId:t,code:n}=e.payload;this._log("Received code update",{textareaId:t,codeLength:n.length}),this.codeUpdateCallbacks.forEach((e=>{try{e(t,n)}catch(e){this._log("Error in code update callback",e)}}))}_handleServerError(e){const t=e.payload?.message||"Unknown server error";this._log("Server error",t),this._triggerErrorCallbacks(t)}_sendMessage(e){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)throw new Error("WebSocket not connected");try{this.ws.send(JSON.stringify(e)),this._log("Sent message",e)}catch(e){throw this._log("Error sending message",e),new Error("Failed to send message to server")}}_startHeartbeat(){this._clearHeartbeat(),this.options.heartbeatInterval>0&&(this.heartbeatTimeout=setTimeout((()=>{if(this.connected)try{this._sendMessage({type:"ping",connectionId:this.connectionId,timestamp:Date.now()}),this._startHeartbeat()}catch(e){this._log("Heartbeat failed",e)}}),this.options.heartbeatInterval))}_clearHeartbeat(){this.heartbeatTimeout&&(clearTimeout(this.heartbeatTimeout),this.heartbeatTimeout=null)}_scheduleReconnect(){if(this.reconnectAttempts>=this.options.maxReconnectAttempts)return this._log("Max reconnect attempts reached"),void this._triggerErrorCallbacks("Max reconnection attempts exceeded");const e=Math.min(this.options.reconnectInterval*Math.pow(2,this.reconnectAttempts),3e4);this._log(`Scheduling reconnect attempt ${this.reconnectAttempts+1} in ${e}ms`),this.reconnectTimeout=setTimeout((()=>{this.debouncedReconnect()}),e)}async _attemptReconnect(){if(!this.connected&&!this.connecting){this.reconnectAttempts++,this._log(`Reconnect attempt ${this.reconnectAttempts}`);try{await this.connect()}catch(e){this._log("Reconnect failed",e),this.reconnectAttempts<this.options.maxReconnectAttempts&&this._scheduleReconnect()}}}_clearTimeouts(){this.reconnectTimeout&&(clearTimeout(this.reconnectTimeout),this.reconnectTimeout=null),this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),this._clearHeartbeat()}_updateStatus(e){this._log("Status changed to",e),this.statusCallbacks.forEach((t=>{try{t(e)}catch(e){this._log("Error in status callback",e)}}))}_triggerErrorCallbacks(e){this.errorCallbacks.forEach((t=>{try{t(e)}catch(e){this._log("Error in error callback",e)}}))}_log(e,t=null){this.options.debug&&(t?console.log(`[WebIdeBridge] ${e}`,t):console.log(`[WebIdeBridge] ${e}`))}}}));